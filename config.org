#+title: Configurações do emacs (EDZ)
#+author: Ulisses dos Santos Cardoso da Silva

* Preparação
 - Instalar o emacs
 - Criar arquivo =~/.emacs.d/init.el=
 - Criar o arquivo =~/.emacs.d/config.org=

* Conteúdo de =init.el=
#+begin_example
(org-babel-load-file
 (expand-file-name "config.org" user-emacs-directory))
#+end_example

* Configurações gerais
** Desabilitar tela de inicio (scratch)
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Configurações de interface

#+begin_src emacs-lisp
  (scroll-bar-mode -1) ;; oculta a barra de rolagem
  (tool-bar-mode -1) ;; oculta a barra de ferramentas
  (tooltip-mode -1) ;; oculta as mensagens
  ;; (menu-bar-mode)
#+end_src

** Números nas linhas
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
  (column-number-mode t)
  ;; (setq display-line-numbers-mode 'relative)
  (dolist (mode '(vterm-mode-hook
  				;; org-mode-hook
  				term-mode-hook
  				shell-mode-hook
  				eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Mostra a linha atual e sinaliza os limites
#+begin_src emacs-lisp
  (global-hl-line-mode t)
  (setq visible-bell t)
#+end_src

** Configurações da fonte
  
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 151)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 151)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 151)
#+end_src

** Usa o <Esc> pra sair dos prompt
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Desabilita teclas
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z")) ;; desabilita Ctrl-z (suspend frame)
  (delete-selection-mode t) ;; o  texto digitado substitui a seleção
#+end_src

** Rolagem suave
        
#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(5 ((shift) .1)) ;; 2 linhas por vez
  	  mouse-wheel-progressive-speed nil ;; Não acelera a rolagem
  	  mouse-wheel-follow-mouse 't ;; rola a janela do mouse
  	  scroll-step 1 ;; rola 1 linha com teclado
  	 )
#+end_src

** Quebra de linha
 
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

** Diretório dos arquivos de backup
   
#+begin_src emacs-lisp
  (setq backup-directory-alist `((".*" . "/tmp/emacs/")))
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

** Tema

#+begin_src emacs-lisp
  ;;(load-theme 'modus-vivendi t)
  (org-indent-mode t)
#+end_src

** Configurações do cursor

#+begin_src emacs-lisp
    (setq-default cursor-type 'bar);; altera o formato do cursor
    (save-place-mode 1)
#+end_src

** Cria um buffer customizado na tela inicial
#+begin_example
   ;; Função pra criar um novo buffer
   (defun new-buffer()
      "Cria um novo buffer"
      (interactive)
      (let ((citri/buf (generate-new-buffer "sem-nome")))
        (switch-to-buffer citri/buf)
        (funcall initial-major-mode)
        (setq buffer-offer-save t)
        citri/buf))
  (setq initial-major-mode 'prog-mode)
  (setq initial-buffer-choice 'new-buffer)
#+end_example

** Arquivos Recentes e salvamento do histórico
#+begin_src emacs-lisp
  (recentf-mode t)
  (savehist-mode t)
#+end_src

** Altera o padrão das tabulações

#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src

** Carrega alterações externas
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** Prompt de confirmação
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Habilita o fechamento de pares
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** Atalhos de zoom
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* Instalação de Pacotes

** Incializa o package.el

#+begin_src emacs-lisp
  (require 'package)

#+end_src

** Define os Repositórios

#+begin_src emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  						 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
  						 ("org"   . "https://orgmode.org/elpa/")
  						 ("elpa"  . "https://elpa.gnu.org/packages/")
  ))
#+end_src

** Atualiza os repositórios

#+begin_src emacs-lisp

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents)
   )
#+end_src

** Instala o use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Instala o auto-package-update
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 5)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "21:00"))
#+end_src

** Pacote de icones

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )  
#+end_src

** Powerline
#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))

#+end_src

** Company mode
#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t)
  )
#+end_src

** Company box
#+begin_src emacs-lisp
  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

** Themes

#+begin_src emacs-lisp

  (use-package catppuccin-theme)

  (setq catppuccin-flavor 'mocha)
  ;(catppuccin-reload)

  ;(load-theme 'catppuccin t)

  (use-package doom-themes
  :ensure t
  :custom
  ;; Global settings (defaults)
  (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
  (doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; for treemacs users
  (doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  :config
  (load-theme 'doom-tokyo-night t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (nerd-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;(doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+end_src

** Flycheck
#+begin_src emacs-lisp

  (use-package flycheck
  :ensure t
  :config
      (add-hook 'after-init-hook #'global-flycheck-mode)
  :init
      (global-flycheck-mode))

#+end_src

** Neotree
Para clonar o repositório do neotree
#+begin_example
git clone https://github.com/jaypei/emacs-neotree.git neotree
cd neotree
git checkout dev
#+end_example

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/neotree")
  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))

#+end_src

** Vertico
#+begin_src emacs-lisp
      ;; Enable Vertico.
  (use-package vertico
      :custom
      (vertico-scroll-margin 0) ;; Different scroll margin
      ;;(vertico-count 20) ;; Show more candidates
      (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
      (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
      :bind (:map vertico-map
                  ("C-n" . vertico-next)
                  ("C-p" . vertico-previous)
                  ("C-k" . vertico-exit)
                  :map minibuffer-local-map
                  ("M-h" . backward-kill-word)
       )
      :init
      (vertico-mode))


  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
      :init
      (savehist-mode))

    ;; Emacs minibuffer configurations.
  (use-package emacs
      :custom
      ;; Enable context menu. `vertico-multiform-mode' adds a menu in the minibuffer
      ;; to switch display modes.
      (context-menu-mode t)
      ;; Support opening new minibuffers from inside existing minibuffers.
      (enable-recursive-minibuffers t)
      ;; Hide commands in M-x which do not work in the current mode.  Vertico
      ;; commands are hidden in normal buffers. This setting is useful beyond
      ;; Vertico.
      (read-extended-command-predicate #'command-completion-default-include-p)
      ;; Do not allow the cursor in the minibuffer prompt
      (minibuffer-prompt-properties
       '(read-only t cursor-intangible t face minibuffer-prompt)))

    ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))


#+end_src

** Marginalia

#+begin_src emacs-lisp

    ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :after vertico
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))

#+end_src

** Consult

Funções úteis:

- =consult-grep=: Grep recursivo.
- =consult-find=: Busca recursiva de arquivos.
- =consult-outline=: Busca entre cabeçalhos (outline).
- =consult-line=: Busca entre as linhas do buffer.
- =consult-buffer=: Circula entre os buffers abertos.

#+begin_src emacs-lisp
  (use-package consult)
#+end_src


** Which key

#+begin_src emacs-lisp
  (which-key-mode 1)
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " )
#+end_src

** Diminish

#+begin_src emacs-lisp
  (use-package diminish :ensure t)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :init
    (rainbow-delimiters-mode 1)
    )
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src
































































